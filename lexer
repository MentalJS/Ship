// Let x = 45 + ( foo * bar)

export enum TokenType {
    Number,
    Identifier,
    Equals,
    OpenParen,
    CloseParen,
    BinaryOperator,
    Let
}
export interface Token {
    value: string;
    type: TokenType;
}
function token(value = "",type:TokenType):Token{
    return { value,type }
}
export function tokenize(sourceCode: string): Token[] {
    const tokens = new Array<Token>()
    const scr = sourceCode.split("")

    //build eachtoken till end of file
    while (scr.length > 0) {
		if (src[0] == "(") {
			tokens.push(token(src.shift(), TokenType.OpenParen));
		} else if (src[0] == ")") {
			tokens.push(token(src.shift(), TokenType.CloseParen));
		} // HANDLE BINARY OPERATORS
		else if (src[0] == "+" || src[0] == "-" || src[0] == "*" || src[0] == "/") {
			tokens.push(token(src.shift(), TokenType.BinaryOperator));
        }
    }

    return tokens
}